import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;

class MyFile {
    // выводит список всех файлов и директорий для `path` - ls
    public static void listDirectory(String path) {
        File file = new File(path);
        String[] files = file.list();
        if(file.isDirectory() && files != null){
            for(String fName : files){
                System.out.println(fName);
            }
        }
    };
    // выводит список файлов с расширением `.py` в `path` - ls_py
    public static void listPythonFiles(String path) {
        String[] pyFiles = Arrays.stream(new File(path).listFiles((dir, name) -> name.toLowerCase().endsWith(".py"))).map(File::getName).toArray(String[]::new);

        Arrays.stream(pyFiles).forEach(System.out::println);
    };
    // выводит `true`, если `path` это директория, в других случаях `false` - id_dir
    public static void isDirectory(String path) {
        File file = new File(path);
        System.out.println(file.isDirectory());
    };
    // выводит `директория` или `файл` в зависимости от типа `path` - define
    public static void define(String path) {
        boolean isDirectory = new File(path).isDirectory();
        if (isDirectory)
            System.out.println("директория");
        else
            System.out.println("файл");
    };
    // выводит права для файла в формате `rwx` для текущего пользователя - readmod
    public static void printPermissions(String path) {
        Path filePath = Paths.get(path);
        StringBuilder permissions = new StringBuilder();
        permissions.append(Files.isReadable(filePath) ? "r" : "-");
        permissions.append(Files.isWritable(filePath) ? "w" : "-");
        permissions.append(Files.isExecutable(filePath) ? "x" : "-");

        System.out.println("Permissions for the file: " + permissions.toString());
    };
    // устанавливает права для файла `path` - setmod
    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        boolean readable = permissions.contains("r");
        boolean writable = permissions.contains("w");
        boolean executable = permissions.contains("x");

        file.setExecutable(executable);
        file.setReadable(readable);
        file.setWritable(writable);
    };
    // выводит контент файла - cat
    public static void printContent(String path) {
        File file = new File(path);
        try {
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()){
                System.out.println(scanner.nextLine());
            }
        } catch (FileNotFoundException ex){
            ex.printStackTrace();
        }
    };
    // добавляет строке `# Autogenerated line` в конец `path` - append
    public static void appendFooter(String path) {
        try (FileWriter fileWriter = new FileWriter(path, true)){
            fileWriter.write("# Autogenerated line");
        } catch (Exception e){
            e.printStackTrace();
        }
    };
    // создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`. `path` может быть директорией или файлом. При директории, копируется весь контент. - bc
    public static void createBackup(String path) {
        File fileSource = new File(path);
        String backupPath = String.format("C:/Users/Nikita/untitled/tmp/%s.backup", new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
        File fileDest = new File(backupPath);

        if (fileSource.isDirectory()) {
            try {
                FileUtils.copyDirectory(fileSource,fileDest);
                System.out.println("directory copied successfully!");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else {
            try {
                FileUtils.copyFile(fileSource,fileDest);
                System.out.println("file copied successfully!");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
    // выводит самое длинное слово в файле - greplong
    public static void printLongestWord(String path) {
        try {
            File file = new File(path);
            Scanner scanner = new Scanner(file);
            StringBuilder text = new StringBuilder();
            while (scanner.hasNextLine()){
                text.append(scanner.nextLine());
            }
            String[] words = text.toString().split(" ");
            Arrays.stream(words)
                    .max(Comparator.comparingInt(String::length)).ifPresent(System.out::println);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    };
    // выводит список команд и их описание - help
    public static void help() {
        System.out.println("MyFS 1.0 команды:\n" +
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                "setmod <path> <perm>    устанавливает права для файла `path`\n" +
                "cat <path>              выводит контент файла\n" +
                "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                "greplong <path>         выводит самое длинное слово в файле\n" +
                "help                    выводит список команд и их описание\n" +
                "exit                    завершает работу программы");
    };
    // завершает работу программы - exit
    public static void exit() {
        return;
    };
}
